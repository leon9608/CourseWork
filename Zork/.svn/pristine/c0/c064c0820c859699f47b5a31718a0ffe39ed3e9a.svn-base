package com.company;

/**
 * Created by Yuyang on 12/2/2017.
 */
public class Function {

    /**
     * Convert the instruction to the direction
     * @param instruction the instruction given by the user
     * @return the direction in the instruction
     */
    String getTargetDirection(String instruction) {
        String[] instructionArray = instruction.split(" ");
        return instructionArray[1];
    }

    /**
     * To check whether the instruction for exit is valid
     * @param instruction the instruction given by the user
     * @return true if the instruction given match the valid exit parameters;
     *           false if the given instruction is invalid to quit
     */
    boolean isValidExit(String instruction) {

        return instruction.equalsIgnoreCase("exit")
                || instruction.equalsIgnoreCase("quit")
                || instruction.equalsIgnoreCase("done");
    }

    /**
     * To check whether the instruction given by the user is valid and hence the adventure can be processed to next room
     * @param instruction the instruction given by the user
     * @param currentRoom the room the person is in now and provide the valid direction options
     * @return true if the instruction given by the user can be identified to proceed the adventure or terminate
     */
    boolean isValidInput(String instruction, Room currentRoom) {
        String[] instructionArray = instruction.split(" ");

        // find invalid input and print appropriate response
        try {
            if (instructionArray.length == 0) {
                throw new Exception("Please enter a valid direction.");
            }
            if (instructionArray.length == 1) {
                if (isValidExit(instructionArray[0])) {
                    return true;
                } else {
                    throw new Exception("Please enter a valid instruction.");
                }
            }
            if (instructionArray[0].equalsIgnoreCase("go")) {
                if (instructionArray.length == 2 && currentRoom.haveAccessTo(instructionArray[1]))
                    return true;
                else throw new Exception("I can't " + instruction);
            } else {
                throw new Exception("I don't understand " + instruction);
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    /**
     * To check whether the layout is valid. For every room,If room A have the access to room B ,B must exist in the layout.
     * if room A have the direct access to room B, then room B must have the direct access to room A.
     * @param testLayout the layout given by the user
     * @return ture if it is a valid layout ;
     *          false if it is an invalid layout.
     */
    boolean isValidLayout(Layout testLayout) {
        Room[] testrooms = testLayout.getRooms();
        if( !testLayout.isInitialRoomValid() ){
            return false;
        }

        // check the room that can be accessed by A exist in the layout
        for(Room initialRoom: testrooms){
            for (Direction direction: initialRoom.getDirections()) {
                if( !testLayout.containsRoom(direction.getRoom())){
                    return false;
                }
            }
        }
        // check if A have access to B ,then B have access to A
        for (Room initialRoom : testrooms) {
            for (Room targetRoom : testrooms) {
                if (initialRoom.haveAccessRoom(targetRoom) &&
                        !targetRoom.haveAccessRoom(initialRoom)) {
                    return false;
                }
            }
        }
        return true;
    }
}
