package com.company;

/**
 * Created by Yuyang on 12/2/2017.
 */
public class Function {


    String getTargetDirection(String instruction) {
        String[] instructionArray = instruction.split(" ");
        return instructionArray[1];
    }

    boolean isValidExit(String instruction) {

        return instruction.equalsIgnoreCase("exit")
                || instruction.equalsIgnoreCase("quit")
                || instruction.equalsIgnoreCase("done");
    }

    boolean isValidInput(String instruction, Room currentRoom) {
        String[] instructionArray = instruction.split(" ");

        // find invalid input and print appropriate response
        try {
            if (instructionArray.length == 0) {
                throw new Exception("Please enter a valid direction.");
            }
            if (instructionArray.length == 1) {
                if (isValidExit(instructionArray[0])) {
                    return true;
                } else {
                    throw new Exception("Please enter a valid instruction.");
                }
            }
            if (instructionArray[0].equalsIgnoreCase("go")) {
                if (instructionArray.length == 2 && currentRoom.haveAccessTo(instructionArray[1]))
                    return true;
                else throw new Exception("I can't " + instruction);
            } else {
                throw new Exception("I don't understand " + instruction);
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    boolean isValidLayout(Layout testLayout) {
        Room[] testrooms = testLayout.getRooms();

        for (Room initialRoom : testrooms) {
            for (Room targetRoom : testrooms) {
                if (initialRoom.haveAccessRoom(targetRoom) &&
                        !targetRoom.haveAccessRoom(initialRoom)) {
                    return false;
                }
            }
        }
        return true;
    }
}
